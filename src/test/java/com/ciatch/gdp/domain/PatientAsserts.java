package com.ciatch.gdp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PatientAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientAllPropertiesEquals(Patient expected, Patient actual) {
        assertPatientAutoGeneratedPropertiesEquals(expected, actual);
        assertPatientAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientAllUpdatablePropertiesEquals(Patient expected, Patient actual) {
        assertPatientUpdatableFieldsEquals(expected, actual);
        assertPatientUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientAutoGeneratedPropertiesEquals(Patient expected, Patient actual) {
        assertThat(expected)
            .as("Verify Patient auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientUpdatableFieldsEquals(Patient expected, Patient actual) {
        assertThat(expected)
            .as("Verify Patient relevant properties")
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getBirthDate()).as("check birthDate").isEqualTo(actual.getBirthDate()))
            .satisfies(e -> assertThat(e.getGender()).as("check gender").isEqualTo(actual.getGender()))
            .satisfies(e -> assertThat(e.getBloodType()).as("check bloodType").isEqualTo(actual.getBloodType()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getPhone1()).as("check phone1").isEqualTo(actual.getPhone1()))
            .satisfies(e -> assertThat(e.getPhone2()).as("check phone2").isEqualTo(actual.getPhone2()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getNif()).as("check nif").isEqualTo(actual.getNif()))
            .satisfies(e -> assertThat(e.getNinu()).as("check ninu").isEqualTo(actual.getNinu()))
            .satisfies(e -> assertThat(e.getHeightCm()).as("check heightCm").isEqualTo(actual.getHeightCm()))
            .satisfies(e -> assertThat(e.getWeightKg()).as("check weightKg").isEqualTo(actual.getWeightKg()))
            .satisfies(e -> assertThat(e.getPassportNumber()).as("check passportNumber").isEqualTo(actual.getPassportNumber()))
            .satisfies(e -> assertThat(e.getContactPersonName()).as("check contactPersonName").isEqualTo(actual.getContactPersonName()))
            .satisfies(e -> assertThat(e.getContactPersonPhone()).as("check contactPersonPhone").isEqualTo(actual.getContactPersonPhone()))
            .satisfies(e -> assertThat(e.getAntecedents()).as("check antecedents").isEqualTo(actual.getAntecedents()))
            .satisfies(e -> assertThat(e.getAllergies()).as("check allergies").isEqualTo(actual.getAllergies()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPatientUpdatableRelationshipsEquals(Patient expected, Patient actual) {
        // empty method
    }
}
