package com.ciatch.gdp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DoctorProfileAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorProfileAllPropertiesEquals(DoctorProfile expected, DoctorProfile actual) {
        assertDoctorProfileAutoGeneratedPropertiesEquals(expected, actual);
        assertDoctorProfileAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorProfileAllUpdatablePropertiesEquals(DoctorProfile expected, DoctorProfile actual) {
        assertDoctorProfileUpdatableFieldsEquals(expected, actual);
        assertDoctorProfileUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorProfileAutoGeneratedPropertiesEquals(DoctorProfile expected, DoctorProfile actual) {
        assertThat(expected)
            .as("Verify DoctorProfile auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorProfileUpdatableFieldsEquals(DoctorProfile expected, DoctorProfile actual) {
        assertThat(expected)
            .as("Verify DoctorProfile relevant properties")
            .satisfies(e -> assertThat(e.getSpecialty()).as("check specialty").isEqualTo(actual.getSpecialty()))
            .satisfies(e -> assertThat(e.getLicenseNumber()).as("check licenseNumber").isEqualTo(actual.getLicenseNumber()))
            .satisfies(e -> assertThat(e.getUniversity()).as("check university").isEqualTo(actual.getUniversity()))
            .satisfies(e ->
                assertThat(e.getStartDateOfPractice()).as("check startDateOfPractice").isEqualTo(actual.getStartDateOfPractice())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoctorProfileUpdatableRelationshipsEquals(DoctorProfile expected, DoctorProfile actual) {
        // empty method
    }
}
