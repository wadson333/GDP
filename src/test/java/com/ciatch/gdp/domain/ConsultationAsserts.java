package com.ciatch.gdp.domain;

import static com.ciatch.gdp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class ConsultationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConsultationAllPropertiesEquals(Consultation expected, Consultation actual) {
        assertConsultationAutoGeneratedPropertiesEquals(expected, actual);
        assertConsultationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConsultationAllUpdatablePropertiesEquals(Consultation expected, Consultation actual) {
        assertConsultationUpdatableFieldsEquals(expected, actual);
        assertConsultationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConsultationAutoGeneratedPropertiesEquals(Consultation expected, Consultation actual) {
        assertThat(expected)
            .as("Verify Consultation auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConsultationUpdatableFieldsEquals(Consultation expected, Consultation actual) {
        assertThat(expected)
            .as("Verify Consultation relevant properties")
            .satisfies(e ->
                assertThat(e.getConsultationDate())
                    .as("check consultationDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getConsultationDate())
            )
            .satisfies(e -> assertThat(e.getSymptoms()).as("check symptoms").isEqualTo(actual.getSymptoms()))
            .satisfies(e -> assertThat(e.getDiagnosis()).as("check diagnosis").isEqualTo(actual.getDiagnosis()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConsultationUpdatableRelationshipsEquals(Consultation expected, Consultation actual) {
        assertThat(expected)
            .as("Verify Consultation relationships")
            .satisfies(e -> assertThat(e.getPrescription()).as("check prescription").isEqualTo(actual.getPrescription()))
            .satisfies(e -> assertThat(e.getPatient()).as("check patient").isEqualTo(actual.getPatient()));
    }
}
