package com.ciatch.gdp.domain;

import static com.ciatch.gdp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class HospitalizationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHospitalizationAllPropertiesEquals(Hospitalization expected, Hospitalization actual) {
        assertHospitalizationAutoGeneratedPropertiesEquals(expected, actual);
        assertHospitalizationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHospitalizationAllUpdatablePropertiesEquals(Hospitalization expected, Hospitalization actual) {
        assertHospitalizationUpdatableFieldsEquals(expected, actual);
        assertHospitalizationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHospitalizationAutoGeneratedPropertiesEquals(Hospitalization expected, Hospitalization actual) {
        assertThat(expected)
            .as("Verify Hospitalization auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHospitalizationUpdatableFieldsEquals(Hospitalization expected, Hospitalization actual) {
        assertThat(expected)
            .as("Verify Hospitalization relevant properties")
            .satisfies(e ->
                assertThat(e.getAdmissionDate())
                    .as("check admissionDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getAdmissionDate())
            )
            .satisfies(e ->
                assertThat(e.getDischargeDate())
                    .as("check dischargeDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getDischargeDate())
            )
            .satisfies(e -> assertThat(e.getReason()).as("check reason").isEqualTo(actual.getReason()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHospitalizationUpdatableRelationshipsEquals(Hospitalization expected, Hospitalization actual) {
        assertThat(expected)
            .as("Verify Hospitalization relationships")
            .satisfies(e -> assertThat(e.getPatient()).as("check patient").isEqualTo(actual.getPatient()));
    }
}
