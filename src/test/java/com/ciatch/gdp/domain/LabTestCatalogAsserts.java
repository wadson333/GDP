package com.ciatch.gdp.domain;

import static com.ciatch.gdp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class LabTestCatalogAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLabTestCatalogAllPropertiesEquals(LabTestCatalog expected, LabTestCatalog actual) {
        assertLabTestCatalogAutoGeneratedPropertiesEquals(expected, actual);
        assertLabTestCatalogAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLabTestCatalogAllUpdatablePropertiesEquals(LabTestCatalog expected, LabTestCatalog actual) {
        assertLabTestCatalogUpdatableFieldsEquals(expected, actual);
        assertLabTestCatalogUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLabTestCatalogAutoGeneratedPropertiesEquals(LabTestCatalog expected, LabTestCatalog actual) {
        assertThat(expected)
            .as("Verify LabTestCatalog auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLabTestCatalogUpdatableFieldsEquals(LabTestCatalog expected, LabTestCatalog actual) {
        assertThat(expected)
            .as("Verify LabTestCatalog relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getUnit()).as("check unit").isEqualTo(actual.getUnit()))
            .satisfies(e ->
                assertThat(e.getReferenceRangeLow())
                    .as("check referenceRangeLow")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getReferenceRangeLow())
            )
            .satisfies(e ->
                assertThat(e.getReferenceRangeHigh())
                    .as("check referenceRangeHigh")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getReferenceRangeHigh())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLabTestCatalogUpdatableRelationshipsEquals(LabTestCatalog expected, LabTestCatalog actual) {
        // empty method
    }
}
