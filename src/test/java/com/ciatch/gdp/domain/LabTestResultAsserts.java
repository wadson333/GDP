package com.ciatch.gdp.domain;

import static com.ciatch.gdp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class LabTestResultAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLabTestResultAllPropertiesEquals(LabTestResult expected, LabTestResult actual) {
        assertLabTestResultAutoGeneratedPropertiesEquals(expected, actual);
        assertLabTestResultAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLabTestResultAllUpdatablePropertiesEquals(LabTestResult expected, LabTestResult actual) {
        assertLabTestResultUpdatableFieldsEquals(expected, actual);
        assertLabTestResultUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLabTestResultAutoGeneratedPropertiesEquals(LabTestResult expected, LabTestResult actual) {
        assertThat(expected)
            .as("Verify LabTestResult auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLabTestResultUpdatableFieldsEquals(LabTestResult expected, LabTestResult actual) {
        assertThat(expected)
            .as("Verify LabTestResult relevant properties")
            .satisfies(e ->
                assertThat(e.getResultValue())
                    .as("check resultValue")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getResultValue())
            )
            .satisfies(e -> assertThat(e.getResultDate()).as("check resultDate").isEqualTo(actual.getResultDate()))
            .satisfies(e -> assertThat(e.getIsAbnormal()).as("check isAbnormal").isEqualTo(actual.getIsAbnormal()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLabTestResultUpdatableRelationshipsEquals(LabTestResult expected, LabTestResult actual) {
        assertThat(expected)
            .as("Verify LabTestResult relationships")
            .satisfies(e -> assertThat(e.getPatient()).as("check patient").isEqualTo(actual.getPatient()))
            .satisfies(e -> assertThat(e.getLabTest()).as("check labTest").isEqualTo(actual.getLabTest()))
            .satisfies(e -> assertThat(e.getConsultation()).as("check consultation").isEqualTo(actual.getConsultation()));
    }
}
